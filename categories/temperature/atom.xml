<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: temperature | Blog | OpenEnergyMonitor]]></title>
  <link href="https://blog.openenergymonitor.org/categories/temperature/atom.xml" rel="self"/>
  <link href="https://blog.openenergymonitor.org/"/>
  <updated>2022-04-12T16:12:50+00:00</updated>
  <id>https://blog.openenergymonitor.org/</id>
  <author>
    <name><![CDATA[Glyn Hudson]]></name>
    <email><![CDATA[support@openenergymonitor.zendesk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Outdoor Temperature Data from Weather Underground to Emoncms & MQTT]]></title>
    <link href="https://blog.openenergymonitor.org/2016/02/outdoor-temperature-data-from-weather/"/>
    <updated>2016-02-29T19:08:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2016/02/outdoor-temperature-data-from-weather</id>
    <content type="html"><![CDATA[<p>Monitoring the temperature outside your house is super useful to inform your home automation systems and calculate domestic heating (and dressing!) requirements.<br /><br />One way is to monitor external temperature is to install your own external <a href="http://shop.openenergymonitor.com/emonth-433mhz-temperature-humidity-node/">emonTH wireless temperature node</a> or use a commercial web-connected weather station. However a cheaper way is to tap into the Internet of Things and connect to another weather station in your area.  <a href="https://www.wunderground.com/weather/api/">Weather Underground</a> have over 18K weather stations online in the USA and a <a href="https://www.wunderground.com/weather/api/">free API</a> for non commercial use.<br /><br />Here’s an example of using nodeRED to poll the Weather Underground API and post to Emoncms (using <a href="http://flows.nodered.org/node/node-red-node-emoncms">nodeRED Emoncms flow</a>) and MQTT.</p>

<!--more-->

<p> See bottom of the post for nodeRED flow export which you can import into your nodeRED by pasting into the import box.<br /><br />NodRED included pre-installed on <a href="https://openenergymonitor.org/emon/node/12212">the latest emonPi image (currently in release-candidate)</a>. The Emoncms flow is pre-installed, you will need to add the <a href="http://flows.nodered.org/node/node-red-node-weather-underground">nodeRED Weather Underground</a> flow by connecting via SSH and running :<br /><br />$ rpi-rw<br />$ cd ~/data/node-red<br />$ sudo npm install node-red-node-weather-underground<br />$ rpi-rw<br />$ exit<br /><br />Once installed you will need to paste in your API key and latitude and longitude (or city) into the Weather Underground node.<br /><br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="https://2.bp.blogspot.com/-mZJm0O0-xZM/VtSO8FO7O-I/AAAAAAABpIA/9wzoEv7Pz54/s1600/capture%2Bimage.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="290" src="https://2.bp.blogspot.com/-mZJm0O0-xZM/VtSO8FO7O-I/AAAAAAABpIA/9wzoEv7Pz54/s640/capture%2Bimage.png" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Example NodeRED flow pulling temperature data from Weather Underground to Emoncms and MQTT&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="https://4.bp.blogspot.com/-Q4L4K6rrVkY/VtSSuTC03sI/AAAAAAABpIQ/hXwY9yTgj-A/s1600/capture%2Bimage2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="224" src="https://4.bp.blogspot.com/-Q4L4K6rrVkY/VtSSuTC03sI/AAAAAAABpIQ/hXwY9yTgj-A/s640/capture%2Bimage2.png" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Emoncms Internal &amp; External Temperature Multigraph&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="https://3.bp.blogspot.com/-WQkcdh5STpY/VtSVU6WGhAI/AAAAAAABpIc/eWEaw8v0jj8/s1600/capture%2Bimage3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="640" src="https://3.bp.blogspot.com/-WQkcdh5STpY/VtSVU6WGhAI/AAAAAAABpIc/eWEaw8v0jj8/s640/capture%2Bimage3.png" width="304" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;My openHAB dashboard displaying outdoor temperature and emonPi data from MQTT&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Example nodeRED flow: &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<span style="font-size: x-small;"><br /></span>&lt;/div&gt;&lt;div style="clear: both; text-align: left;"&gt;<span style="font-size: x-small;">[{“id”:”14e3d598.a7352a”,”type”:”emoncms-server”,”z”:”4cd40f47.6c38f”,”server”:”http://192.168.0.35/emoncms”,”name”:”emonpi”},{“id”:”286b0130.d794fe”,”type”:”mqtt-broker”,”z”:””,”broker”:”192.168.0.35”,”port”:”1883”,”clientid”:””,”usetls”:false,”verifyservercert”:true,”compatmode”:true,”keepalive”:”15”,”cleansession”:true,”willTopic”:””,”willQos”:”0”,”willRetain”:null,”willPayload”:””,”birthTopic”:””,”birthQos”:”0”,”birthRetain”:null,”birthPayload”:””},{“id”:”8e40f136.25c8c”,”type”:”inject”,”z”:”4cd40f47.6c38f”,”name”:”Poke every 30min”,”topic”:””,”payload”:””,”payloadType”:”str”,”repeat”:”1800”,”crontab”:””,”once”:true,”x”:293.33331298828125,”y”:616.3333740234375,”wires”:[[“801e0088.7a2eb”]]},{“id”:”1d8fc53b.c7453b”,”type”:”mqtt out”,”z”:”4cd40f47.6c38f”,”name”:”MQTT: weather/temp”,”topic”:”weather/temp”,”qos”:””,”retain”:””,”broker”:”286b0130.d794fe”,”x”:840,”y”:479,”wires”:[]},{“id”:”9dfe39d9.afac48”,”type”:”debug”,”z”:”4cd40f47.6c38f”,”name”:””,”active”:true,”console”:”false”,”complete”:”payload”,”x”:772,”y”:395,”wires”:[]},{“id”:”c647a520.c30618”,”type”:”debug”,”z”:”4cd40f47.6c38f”,”name”:”View full output”,”active”:true,”console”:”false”,”complete”:”payload”,”x”:581.3333129882812,”y”:589.3333740234375,”wires”:[]},{“id”:”17551590.ce038a”,”type”:”function”,”z”:”4cd40f47.6c38f”,”name”:”Return temp deg C”,”func”:”context.global.outdoor_temp = msg.payload.tempc;  \nreturn {payload:context.global.outdoor_temp};”,”outputs”:1,”noerr”:0,”x”:533.3333129882812,”y”:454.3333435058594,”wires”:[[“1d8fc53b.c7453b”,”9dfe39d9.afac48”,”50f404a6.f89bac”]]},{“id”:”801e0088.7a2eb”,”type”:”wunderground”,”z”:”4cd40f47.6c38f”,”name”:””,”lon”:”-4.1716485”,”lat”:”53.1429426”,”city”:””,”country”:””,”x”:321,”y”:529,”wires”:[[“17551590.ce038a”,”c647a520.c30618”]]},{“id”:”50f404a6.f89bac”,”type”:”emoncms”,”z”:”4cd40f47.6c38f”,”name”:”Emoncms”,”emonServer”:”14e3d598.a7352a”,”nodegroup”:”weather”,”x”:800,”y”:539,”wires”:[]}]</span>&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emonTH Prototype ]]></title>
    <link href="https://blog.openenergymonitor.org/2013/06/emonth-prototype/"/>
    <updated>2013-06-24T08:57:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/06/emonth-prototype</id>
    <content type="html"><![CDATA[<p>I’m currently working on a little unit called the emonTH, a remote temperature and humidity monitoring node. We wanted a tidy looking, easy to deploy little unit for monitoring the environmental conditions in various rooms of our houses. The temperature and humidity data gathered can be fed into emoncms and used for <a href="http://openenergymonitor.blogspot.co.uk/search/label/Building%20Energy%20Modelling">building energy modelling</a>, heating system optimisation etc.<br /><br />The design so far has got options for DS18B20 temperature sensor or DHT22 sensor for humidity &amp; temperature. External sensors can be connected via terminal block (not soldered in on prototype). The enclosure can be wall mountable. The unit will be battery powered with option for mini-usb power. We have estimated around 6-9 months battery. I hope we might be able to get a year or so battery life with optimization and slowing down the readings to once every few min.<br />&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;I’m currently testing prototype #1. &lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;To keep power consumption down the ATmega328 microcontroller is put to sleep in-between reading and the sensors are powered from digital outputs and are turned off altogether in between readings, this should stop any self heating effects (see <a href="http://openenergymonitor.org/emon/node/2484#comment-13108">forum thread</a>), I’m planning to do some accuracy testing on prototype soon.&lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-bbtjnWvcv4o/UcNKNyQh0-I/AAAAAAAAe2w/aWQ1Pm4-xTU/s1600/2013-06-12+09.08.36.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://3.bp.blogspot.com/-bbtjnWvcv4o/UcNKNyQh0-I/AAAAAAAAe2w/aWQ1Pm4-xTU/s320/2013-06-12+09.08.36.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;emonTH first prototype with DTH22 and DS18B20&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-G-IkJdFn8uU/UcNKOb7yI7I/AAAAAAAAe20/GcGRXoEM5Hc/s1600/2013-06-12+09.07.50.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://4.bp.blogspot.com/-G-IkJdFn8uU/UcNKOb7yI7I/AAAAAAAAe20/GcGRXoEM5Hc/s320/2013-06-12+09.07.50.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;emonTH enclosure&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;As with other the other OpenEnergyMonitor hardware the emonTH has got an ATmega328 with the Arduino bootloader so it’s nice and easy to modify and upload new the code (sketches). For the wireless there is an RFM12B module to be compatible with our other hardware (RFM12Pi base station etc). Again, as with all our other hardware units the schematic and CAD filed will be open-sourced. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="" style="clear: both; text-align: left;"&gt;The emonTH uses a little module from <a href="http://shop.ciseco.co.uk/about-us/">Ciseco</a> called <a href="http://shop.ciseco.co.uk/rf-328-bare-arduino-atmega-328-compatible-micro-board-rfu-328/">RFu328</a>. This unit is an ATmega328 plus a radio RFM12B or <a href="http://shop.ciseco.co.uk/rf-328-arduino-atmega-328-compatible-radio-transceiver-rfu-328/">SRF</a> in the same small form factor as an Xbee. We decided to use the RFu328 partly because it’s nice and small and makes manufacture easier for us and party since it allows to to easily swap between using the RFM12B radio or the SRF while keeping the flexibly and ease of use of the ATmega328 with Arduino Uno serial bootloader. &lt;/div&gt;&lt;div class="" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://openmicros.org/images/RFu-328/RF%C2%B5-328-RFM12-Resistors.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="150" src="http://openmicros.org/images/RFu-328/RF%C2%B5-328-RFM12-Resistors.JPG" width="200" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;RFu328 with RFM12B&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />&lt;div&gt;The little red circle on the image above indicates the only hardware charge required when using an RFM12B radio on the RFu328. The SMT resistor is rotated routed 90 degrees swapping over Dig 1 SRF UART (Tx ) to Dig3 (INT 1) to be used as the RFM12B SPI interrupt. The RFu328 with the RFM12B requires a modified JeeLib Arduino library called <a href="https://github.com/openenergymonitor/RFu_jeelib">RFu_JeeLib</a>.<br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://cdn2.bigcommerce.com/server3700/8d73a/products/221/images/457/IMG_5389__35236.1352109163.1280.1280.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="298" src="http://cdn2.bigcommerce.com/server3700/8d73a/products/221/images/457/IMG_5389__35236.1352109163.1280.1280.JPG" width="400" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;RFu328 with SRF &amp; Chip Antenna&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing DS18B20 temperature sensing on emonTx v3]]></title>
    <link href="https://blog.openenergymonitor.org/2013/05/testing-ds18b20-temperature-sensing-on/"/>
    <updated>2013-05-25T09:34:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/05/testing-ds18b20-temperature-sensing-on</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">Hello, so I thought Id try something new on this blog, I'm going to try writing short blog posts about progress and general work on things day to day, these are not intended to mark significant developments or milestones which many of the other blog posts have tended to be, something more like a log book that will hopefully give insight into the development process.</div>
<p><br /><b>Testing DS18B20 temperature sensing on emonTx v3</b><br /><br />Glyn and I with help from Robert are continuing with testing emontx V3, there have been a few niggling issues that we’re working on but its pretty much there. This morning I tested the DS18B20 temperature sensor connection, it all worked fine, one of the nice things of the new emontx is that there are screw terminals for connecting up the temperature sensor which makes connecting up the encapsulated DS18B20 temperature sensors much easier.<br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://1.bp.blogspot.com/-ffiA6kvc8Gk/UZ6qIJqbXvI/AAAAAAAACms/2qOL0QhZnZs/s1600/2013-05-24+00.40.45.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto; text-align: center;"><img border="0" height="180" src="http://1.bp.blogspot.com/-ffiA6kvc8Gk/UZ6qIJqbXvI/AAAAAAAACms/2qOL0QhZnZs/s320/2013-05-24+00.40.45.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;DS18B20 connected to emontx v3&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;Another new addition for temperature sensing is the ability to switch the sensor power pin on and off for use when powering the emontx of batteries (this avoids the hack introduced in the low power temperature node that uses the emontx v2.2 pcb). Anyway the circuit was originally designed with analog 5 (used as digital pin 19) being used for data and digital 5 used for power. While reading about using analog inputs as digital pins I came across this note on the arduino site:<br /><br /><i>The Atmega datasheet also cautions against switching analog pins in<br />close temporal proximity to making A/D readings (analogRead) on other<br />analog pins. This can cause electrical noise and introduce jitter in<br />the analog system. It may be desirable, after manipulating analog pins<br />(in digital mode), to add a short delay before using analogRead() to<br />read other analog pins.</i><br /><br />It turns out one can just switch the atmega pins used around so analog 5 (digital 19) is used for power and digital 5 is used for the data which will be higher frequency switching and so good to bring that off the analog pin. As power switching is only needed in battery operation one could make a temperature measurement after the analog read section just before putting the emontx to sleep which should not cause interference.<br /><br /><b>Update (15/06/13): On future emonTx V3 PCB revisions 3.x ADC 5 (Dig 19) and Dig5 have been swapped round on the PCB to fix this issue. Dig 5 is now DS18B20 one-wire signal and ADC5 (Dig19) is now DS18B20 power.</b><br /><b><br /></b><b>If no DS18B20 temperature sensor is connected the ports can be used for other functions. ADC 5 can be used as a analogue input/output and Dig 5 (with R27/R24 4.7K pull up removed) can be used as a general Digital I/O with PWM capabilities. </b><br /><b><br /></b><b>The DS18B20 data 4.7K pull-up resistor on Dig 5 and the Dig 2 IRQ 10K pull-down resistor have been designed to take a thru-hole resistor if the SMT resistor was removed to make it possible to change the value of these resistors. </b></p>
]]></content>
  </entry>
  
</feed>
