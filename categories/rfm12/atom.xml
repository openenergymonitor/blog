<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RFM12 | Blog | OpenEnergyMonitor]]></title>
  <link href="https://blog.openenergymonitor.org/categories/rfm12/atom.xml" rel="self"/>
  <link href="https://blog.openenergymonitor.org/"/>
  <updated>2019-08-21T13:47:14+00:00</updated>
  <id>https://blog.openenergymonitor.org/</id>
  <author>
    <name><![CDATA[Glyn Hudson]]></name>
    <email><![CDATA[support@openenergymonitor.zendesk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing RFM69CW]]></title>
    <link href="https://blog.openenergymonitor.org/2014/12/introducing-rfm69cw/"/>
    <updated>2014-12-08T11:14:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2014/12/introducing-rfm69cw</id>
    <content type="html"><![CDATA[<p>For sometime now the Hope RF RFM12B module has been our RF module of choice. This module was chosen for it’s low cost, decent performance and importantly for us, an active development community. On the software side we use the excellent JeeLabs <a href="https://github.com/jcw/jeelib">JeeLib RF12</a> Arduino library.<br />&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;About a year ago Hope RF announced the RFM12B to be ‘EOL’ (End-of-Life), there has been a degree of confusion as to what exactly this means; currently manufacture of the module is still taking place and supply is still easily available. However, we acknowledged that the time had arrived to look for alternatives since Hope RF no longer offers support or recommends the RFM12B for new products. &lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;An obvious alternative that was explored by JeeLabs  is the <a href="http://www.hoperf.com/rf/fsk_module/RFM69CW.htm">Hope RF RFM69CW</a> module, it uses SEMTEC designed silicon (as opposed to Silicon Labs in the RFM12B). It’s pin-compatible with the RFM12B. Using the updated JeeLib driver the RFM69CW is be backwards compatible with RFM12B helping users of RFM12B to make a smooth transition. Thanks to JCW from JeeLabs and LowPower Labs for the work on developing the RFM69CW Arduino library. We have been working with JeeLabs to source modules and test the driver software.    &lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-5kA0_0jlUB8/VIV-2FuqXhI/AAAAAAABAqk/mTNDJp8C0Pw/s1600/RFM69CW_fullfrontal_large__52640.1417518813.1280.1280.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://3.bp.blogspot.com/-5kA0_0jlUB8/VIV-2FuqXhI/AAAAAAABAqk/mTNDJp8C0Pw/s1600/RFM69CW_fullfrontal_large__52640.1417518813.1280.1280.jpg" height="200" width="192" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Hope RF RFM69CW&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;I will let <a href="http://www.digitalsmarties.net/products/rfm69cw-868-mhz">JeeLabs/DigitalSmarties</a> introduce the module &lt;/div&gt;<br /><i>“The recently announced RFM69CW radio module by <a href="http://www.hoperf.com/">HopeRF</a> is a compact, powerful radio transceiver module for swapping data packets in the 868 MHz ISM band, using standard and enhanced FSK modulation. Great for sub-compact designs; just 4mm of mounted height from using an SMD precision crystal.</i>&lt;div&gt;<i><br />Though consuming a similar level of power, the RFM69CW receiver section can decode fainter signals than the classic RFM12B. The transmitter section <em>maximum</em> output power is +13dBm, considerably higher than the +5dBm of the RFM12B. The current drain at these (adjustable) higher power settings is correspondingly higher. With the better receiver sensitivity, many applications will not need to use the higher transmit power settings, potentially saving on battery life.<br /><br />Comparing like-with-like, pairs of modules will generally have greater range and/or better penetration of walls/ceiling than when using pairs of the classic RFM12B.<br /><br /><br />The physical module is compatible with the PCB footprint on all current JeeNodes and JeeLinks. For details of the fast-evolving level of software support, see <a href="http://jeelabs.net/boards/6/topics/4050">this Forum topic</a>.<br /><br />Control is via a fast SPI bus with reduced MPU loading. The recommended power supply range of 1.8 &lt; Vdd &lt; 3.6 V can squeeze almost the last energy out of depleting batteries without needing a boost converter.”</i><br /><br /><a href="http://openenergymonitor.org/emon/sites/default/files/Selection_081.jpg"><img border="0" height="142" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2Fopenenergymonitor.org%2Femon%2Fsites%2Fdefault%2Ffiles%2FSelection_081.jpg&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" width="640" /></a> <br /><br /><br />Comparison tabled compiled by <a href="http://www.mikrocontroller.net/articles/RFM69">http://www.mikrocontroller.net/articles/RFM69</a> <br /><br /><br />Early next year we will start transitioning to the RFM69CW, end-users should not notice a difference apart from a new input on the emoncms Inputs page ‘RSSI’ (Received Signal Strength Indicator), see below.<br /><br />To simplify manufacture and module sourcing we will be standardising on 433Mhz, we will make available no-RF versions of units for users who wish to solder on their own 868Mhz modules. <a href="http://openenergymonitor.org/emon/node/6211">See forum thread</a> <br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://2.bp.blogspot.com/-h6P1xlW9yV0/VIV9oaYfFCI/AAAAAAABAqU/cZuhsP1h4DA/s1600/DSCF6074%2B(1).JPG" style="margin-left: auto; margin-right: auto;"><img border="0" height="200" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F2.bp.blogspot.com%2F-h6P1xlW9yV0%2FVIV9oaYfFCI%2FAAAAAAABAqU%2FcZuhsP1h4DA%2Fs1600%2FDSCF6074%252B(1).JPG&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" width="200" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;<span style="font-size: small; text-align: start;">RFM69CW on the emonTx V3.4 </span>&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />For early adopters we have limited numbers of RFM12Pi Raspberry Pi Expansion with RFM69CW module in the shop. Using the latest<a href="https://github.com/emonhub/emonhub/"> emonHub software (currently in ‘Testing’ branch)</a> using the RFM12Pi with RFM69CW on a Raspberry Pi should be seamless, emonHub automatically detects the higher baud rate requirement of the RFM12Pi with RFM69CW (56700 as opposed to 9600 with RFM12B RFM12Pi) sets baud accordingly and starts posting RSSI (received signal strength indication) to emoncms. <br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://cdn2.bigcommerce.com/server4400/98a75/products/160/images/576/DSCF6082__86790.1417790117.1280.1280.JPG?c=2" style="margin-left: auto; margin-right: auto;"><img border="0" height="300" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2Fcdn2.bigcommerce.com%2Fserver4400%2F98a75%2Fproducts%2F160%2Fimages%2F576%2FDSCF6082__86790.1417790117.1280.1280.JPG%3Fc%3D2&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" width="400" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;<span style="font-size: small; text-align: start;">RFM69CW on the RFM12Pi on Raspberry Pi Model B+</span>&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-f2Yya6G5usc/VIVzF8EdzGI/AAAAAAABAqE/hHz6VLoixuI/s1600/Screenshot%2B2014-12-08%2Bat%2B09.44.14.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="137" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-f2Yya6G5usc%2FVIVzF8EdzGI%2FAAAAAAABAqE%2FhHz6VLoixuI%2Fs1600%2FScreenshot%252B2014-12-08%252Bat%252B09.44.14.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;<span style="font-size: small; text-align: start;">Example RSSI value from emonTH in emoncms</span>&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />The RSSI readings are very useful as they give a quantitative means of comparing RF performance which should help when deciding on the positioning of units during install and developing better antenna setups.<br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://openenergymonitor.org/emon/sites/default/files/Screenshot%202014-12-04%20at%2011.46.20.png" style="margin-left: auto; margin-right: auto;"><img border="0" height="250" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2Fopenenergymonitor.org%2Femon%2Fsites%2Fdefault%2Ffiles%2FScreenshot%25202014-12-04%2520at%252011.46.20.png&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;<span style="font-size: small; text-align: start;">RSSI readings from nodes setup in my house (mix of RFM12B and RFM69CW) </span>&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-3o90e0QVwg4/VIWFWNvE2AI/AAAAAAABAq0/fHBlmkcli5g/s1600/IMG_20141202_171012783_HDR.jpg" style="margin-left: auto; margin-right: auto;"><img border="0" height="360" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F4.bp.blogspot.com%2F-3o90e0QVwg4%2FVIWFWNvE2AI%2FAAAAAAABAq0%2FfHBlmkcli5g%2Fs1600%2FIMG_20141202_171012783_HDR.jpg&amp;container=blogger&amp;gadget=a&amp;rewriteMime=image%2F*" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;<span style="font-size: small; text-align: start;">RFM69CW on the upcoming </span><a href="http://openenergymonitor.org/emon/node/3937" style="font-size: medium; text-align: start;">emonPi Raspberry Pi Energy Monitoring Shield</a><span style="font-size: small; text-align: start;"> (due for launch in the new year) </span>&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />For more info on the RFM69CW see Building Block Overview Page: <br /><br /><a href="http://openenergymonitor.org/emon/buildingblocks/rfm69cw">http://openenergymonitor.org/emon/buildingblocks/rfm69cw</a><br /><br />&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pebble Smart Watch Emoncms Heating Control Demo]]></title>
    <link href="https://blog.openenergymonitor.org/2014/08/pebble-smart-watch-emoncms-heating/"/>
    <updated>2014-08-01T15:50:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2014/08/pebble-smart-watch-emoncms-heating</id>
    <content type="html"><![CDATA[<p>This post follows on my post a while back on <a href="http://openenergymonitor.blogspot.co.uk/2013/12/emoncms-early-heating-control-demo.html">Emoncms heating control</a>, and links in with my previous post on using Tasker to display Emoncms notifications. For details of the hardware and overview of the heating control setup, see the Emoncms heating control post linked above.<br /><br />The Pebble is a Bluetooth connected smart watch which works with Apple and android smartphones. Using an e-ink display the Pebble watches achieves a week of battery life. Very impressive from a hardware point of view. I’ve been using a Pebble with my android phone for the past couple of weeks and found the Pebble to be useful for keeping up with <a href="http://openenergymonitor.blogspot.com/2014/08/android-tasker-pebble-smartwatch.html">notifications</a> while out out and about and especially for <a href="https://play.google.com/store/apps/details?id=ca.rebootsramblings.musicboss&amp;hl=en_GB">controlling music</a>, <a href="https://play.google.com/store/apps/details?id=com.batescorp.pebble.nav&amp;hl=en_GB">navigation directions</a> and <a href="https://play.google.com/store/apps/details?id=com.strava&amp;hl=en_GB">activity tracking</a> while out biking, running, driving and even swimming!<br /><br />The thought occurred to me that the Pebble could potentially be a super convenient way to quickly control my heating. I’ve got working a simple demo to turn my heating on and off, the could easily be extended to allow setting a set point.<br /><br />When the Pebble was first released my friend Ryan Brooks put together a <a href="http://openenergymonitor.blogspot.com/2014/02/pebble-smart-watch-emoncms-display.html">demo to display feed data from Emoncms on the pebble</a>. The code for this demo is up on GitHub, however since then things have moved on, Pebble have released SDK 2.0 and launched the pebble app store allowing many applications to be easily loaded onto the Pebble. One of the more powerful applications is <a href="https://play.google.com/store/apps/details?id=com.kodek.pebbletasker&amp;hl=en_GB">Pebble Tasker</a>, when linked with the <a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm">main Tasker App</a> on an android phone the possibles are endless. See my previous <a href="http://openenergymonitor.blogspot.com/2014/08/android-tasker-pebble-smartwatch.html">blog post on using Tasker to display Emoncms notification on an android phone</a>. Taking inspiration from <a href="http://nathan.chantrell.net/home-automation/">Nathan Chantrell’s home automation setup</a> using Pebble and Tasker I decided to have a go at directly controlling my heating from my Pebble, here is the result:<br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://1.bp.blogspot.com/-_SSMd3zwwb4/U9p1Vm5zYDI/AAAAAAAA4ns/QS82TULGXx8/s1600/P1050327.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-_SSMd3zwwb4/U9p1Vm5zYDI/AAAAAAAA4ns/QS82TULGXx8/s1600/P1050327.JPG" height="240" width="320" /></a>&lt;/div&gt;<br /><br />&lt;iframe allowfullscreen="" frameborder="0" height="315" src="//www.youtube.com/embed/yRyeDhEQVkg" width="560"&gt;&lt;/iframe&gt; <br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;<br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-sJ0ArawyZgQ/U9p1WUgL-7I/AAAAAAAA4nw/SUXXwndvDN4/s1600/P1050328.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-sJ0ArawyZgQ/U9p1WUgL-7I/AAAAAAAA4nw/SUXXwndvDN4/s1600/P1050328.JPG" height="240" width="320" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Here are the steps to replicate this system:&lt;/div&gt;&lt;h3 style="clear: both; text-align: left;"&gt;1. Install Emoncms on a Raspberry Pi and enable RF12 Packetgen Module &lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;I used the new pre-built SD card image for the low write version of emoncms, downloadable from the link below. This is soon to become our default Raspberry Pi pre-built image once testing is complete&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="https://github.com/emoncms/emoncms/tree/bufferedwrite">https://github.com/emoncms/emoncms/tree/bufferedwrite</a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Following the setup guide enable local logging and configure emonHub&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="https://github.com/emoncms/emoncms/blob/bufferedwrite/docs/setup.md">https://github.com/emoncms/emoncms/blob/bufferedwrite/docs/setup.md</a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The heating control setup requires the emoncms Packetgen module. Follow the steps to enable packetgen to work with emonHub. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="https://github.com/emoncms/emoncms/blob/bufferedwrite/docs/emonhubmod.md">https://github.com/emoncms/emoncms/blob/bufferedwrite/docs/emonhubmod.md</a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;More info on packetgen module can be found: <a href="https://github.com/emoncms/packetgen">https://github.com/emoncms/packetgen</a>&lt;/div&gt;&lt;h3 style="clear: both; text-align: left;"&gt;2. Setup RFM12B receiver and control relay &lt;/h3&gt;&lt;div&gt;To perform the actual control of the boiler you will need to setup an RFM12B receiver node with a relay or similar. The actual hardware setup will depend on what you want to control, a JeeLink or partially populated emonTx V2 work well as a good base for the control hardware. See my <a href="http://openenergymonitor.blogspot.com/2013/12/emoncms-early-heating-control-demo.html">previous post on heating control</a> for more info regarding the hardware. The packetgen module will provide an example Arduino sketch to upload. &lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;h3&gt;3. Install and Configure Tasker on your android Phone &lt;/h3&gt;&lt;div&gt;<a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm">https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm</a><br /><br />&lt;div&gt;The emoncms API to set a packetgen variable is as follows:<br /><br /><i>http://YOUR_EMONCMS_SERVER_IP_OR_HOSTNAME/emoncms/packetgen/update.json?id=4&amp;value=1&amp;apikey=”YOUR_RW_APIKEY”</i>&lt;/div&gt;&lt;div&gt;<br />ID is the id of the packetgen variable (they start at 0) and value is the value to be set, the example above will turn the heating on setting variable 4 which in my setup is a boolean control variable to ‘1’. You can test if this is working by calling the API in your browser.<br /><br />&lt;/div&gt;I’ve created a Tasker template task which calls the above API which can be downloaded from Github and imported into Tasker, follow instructions on Github Readme. Variables should be self-explanatory.<br /><br /><a href="https://github.com/emoncms/androidTasker">https://github.com/emoncms/androidTasker</a><br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-cUl9ckQsfuY/U9uzvgik16I/AAAAAAAA4s0/L8JNp-rUeE8/s1600/2014-08-01+15.32.06.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-cUl9ckQsfuY/U9uzvgik16I/AAAAAAAA4s0/L8JNp-rUeE8/s1600/2014-08-01+15.32.06.png" height="640" width="400" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;If a successful response is received from the Emoncms server a ‘success’ notification is displayed, else a fail notification is activated. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-PqdqiEaQ0IU/U9u0XAshGiI/AAAAAAAA4tA/U4Z2b-S7LmU/s1600/2014-08-01+15.32.51.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-PqdqiEaQ0IU/U9u0XAshGiI/AAAAAAAA4tA/U4Z2b-S7LmU/s1600/2014-08-01+15.32.51.png" height="400" width="225" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;<br />Home screen Tasker task shortcut widgets can be created on your android home screen to allow Tasker tasks to be easily activated, or profiles can be setup to turn the heating on as you arrive home / leave work or certain times per day. The possibles are endless! Just make sure your system has some hardware fail-safe so you don’t get home to a house like a sauna or worse!<br /><br />&lt;/div&gt;&lt;div&gt;<br />If you are setting up Tasker yourself from scratch setup GET requst as follows:&lt;/div&gt;&lt;div&gt;<br /><i>New Task &gt; + new action &gt; net &gt; HTTP GET &gt; enter HTTP API above into host and (optionally) write output to log file </i>&lt;/div&gt;&lt;h3&gt;<br />4. Install &amp; configure Pebble Tasker on the Pebble Watch&lt;/h3&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="https://play.google.com/store/apps/details?id=com.kodek.pebbletasker&amp;hl=en_GB">https://play.google.com/store/apps/details?id=com.kodek.pebbletasker&amp;hl=en_GB</a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;To map Tasker tasks to allow easy control from a Pebble &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://1.bp.blogspot.com/-d7UrLZR3-qU/U9umjLXlyEI/AAAAAAAA4sY/aLp4ph6XcXw/s1600/2014-07-31+17.10.26.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-d7UrLZR3-qU/U9umjLXlyEI/AAAAAAAA4sY/aLp4ph6XcXw/s1600/2014-07-31+17.10.26.png" height="400" width="225" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;h3 style="clear: both; text-align: left;"&gt;Other Pebble Tweaks I’ve found useful&lt;/h3&gt;&lt;div style="clear: both; text-align: left;"&gt;While not directly relevant to heating control here are some further details of my Pebble smartwatch setup: &lt;/div&gt;&lt;div style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div style="clear: both; text-align: left;"&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Using <a href="http://pebblebits.com/">PebbleBits firmware</a> on the pebble to quickly launch pebble apps from the watch face&lt;/li&gt;&lt;li&gt;Using <a href="https://github.com/emoncms/androidTasker/blob/master/Strava_Start___Stop.tsk.xml">Tasker to Stop / Start Strava </a>&lt;/li&gt;&lt;li&gt;<a href="http://www.mypebblefaces.com/apps/1486/1299/">Modern Watchface</a> is my favourite watch face (shown in demo above)&lt;/li&gt;&lt;li&gt;<a href="https://play.google.com/store/apps/details?id=ca.rebootsramblings.musicboss&amp;hl=en_GB">Music Boss </a>is great for controlling music and starting podcasts while driving or biking&lt;/li&gt;&lt;li&gt;<a href="https://play.google.com/store/apps/details?id=com.batescorp.pebble.nav&amp;hl=en_GB">NavMe</a> is great for directions on the Pebble while on the bike  &lt;/li&gt;&lt;li&gt;Tasker can be used to send commonly sent SMS’s and call favourite contacts direct from the Pebble &lt;/li&gt;&lt;/ul&gt;<br />&lt;div style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;<br /><br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emonTx V3 Antenna Testing]]></title>
    <link href="https://blog.openenergymonitor.org/2014/03/emontx-v3-antenna-testing/"/>
    <updated>2014-03-12T12:57:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2014/03/emontx-v3-antenna-testing</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">Today we did some quick testing regarding using different antennas with the emonTx V3.&nbsp;</div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;">Four antenna options were tested (Farnell part numbers listed for SMA antennas) :</div>
<div class="separator" style="clear: both; text-align: center;"><br /></div>
<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-d3qcEqG01rk/UyBY6Su1FgI/AAAAAAAAvcw/hJEyZckomxU/s1600/emonTx_ant_test_photo.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-d3qcEqG01rk/UyBY6Su1FgI/AAAAAAAAvcw/hJEyZckomxU/s1600/emonTx_ant_test_photo.jpg" height="321" width="640" /></a></div>
<p><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-7t0KenIjHzk/UyBY6Wxv8jI/AAAAAAAAvcs/riy9H2wVCSA/s1600/emonTxV3_ant_test.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-7t0KenIjHzk/UyBY6Wxv8jI/AAAAAAAAvcs/riy9H2wVCSA/s1600/emonTxV3_ant_test.png" height="358" width="640" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Note: the graph sub-title has a typo, it should read ‘RFM69CW’, ‘CRW’ module does not exist.. At least to my knowledge! &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;It was found that the wire-whip antenna as shipped by default with the emonTx V3 performed best. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;However using an SMA could be preferable in some environments; it’s more robust and can  be extended easier. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Now we have a way to measure RSSI (received signel strength indicator) using  an rfm69cw module we plan  to  do some more antenna and range testing. I’m interested to test to see how many db we’re loosing in the antenna pcb trace from the module to the RFu328 then the emonTx V3 pcb trace then finally into the 90 degree sma connector. In future version will probably but the rf module and MCU directly on the PCB keeping the antenna trace as short as possible and use an edge mounted sma connector (these are also cheaper and easier to solder in manufacture). &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;For more info on the test see the emonTx V3 wiki page:  &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="http://wiki.openenergymonitor.org/index.php?title=EmonTx_V3#Antenna">http://wiki.openenergymonitor.org/index.php?title=EmonTx_V3#Antenna</a>&lt;/div&gt;<br /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emonGLCD 433 / 868 Mhz RF Scanner & Signal Strength Meter ]]></title>
    <link href="https://blog.openenergymonitor.org/2013/08/emonglcd-433-868-mhz-rf-scanner-signal/"/>
    <updated>2013-08-26T14:27:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/08/emonglcd-433-868-mhz-rf-scanner-signal</id>
    <content type="html"><![CDATA[<p><a href="http://openenergymonitor.org/emon/user/1824">Martin Roberts</a> has developed a fantastic bit of firmware for the emonGLCD to enable it to be used as an RF scanner and signal strength meter on the 433 / 868 Mhz RF band.<br /><br /> This makes the emonGLCD running this firmware a useful tool for debugging RF transmission and checking out signal strength.  To run the firmware a small hardware modification is required to the emonGLCD to access the analogue signal strength output signal from the RFM12B.<br /><br />Martin’s sketch has been added to the <a href="https://github.com/openenergymonitor/EmonGLCD/tree/master/GLCD_SSM">emonGLCD github repo</a>.<br /><br />Full details including build-guide and discussion can be found on the original <a href="http://openenergymonitor.org/emon/node/2395">forum thread</a>.<br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-S0m9P9FKx18/UhtmSquXvUI/AAAAAAAAjn8/d7rcJjPtYM0/s1600/glcdssm_intf.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://3.bp.blogspot.com/-S0m9P9FKx18/UhtmSquXvUI/AAAAAAAAjn8/d7rcJjPtYM0/s400/glcdssm_intf.jpg" width="400" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://openenergymonitor.org/emon/sites/default/files/GLCD_SSM_interface.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="579" src="http://openenergymonitor.org/emon/sites/default/files/GLCD_SSM_interface.jpg" width="640" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://openenergymonitor.org/emon/sites/default/files/GLCD_SSM_inside.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="302" src="http://openenergymonitor.org/emon/sites/default/files/GLCD_SSM_inside.jpg" width="400" /></a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ciseco SRF and RFM12B Power Consumption Investigation]]></title>
    <link href="https://blog.openenergymonitor.org/2013/07/ciseco-srf-vs-rfm12b-power-consumption/"/>
    <updated>2013-07-25T14:18:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/07/ciseco-srf-vs-rfm12b-power-consumption</id>
    <content type="html"><![CDATA[<p>Following on <a href="2013/07/new-oscilloscope/">yesterdays post</a> on the Hope RF RFM12B power consumption I decided to do a comparison with the Ciseco <a href="http://shop.ciseco.co.uk/srf-wireless-rf-radio-surface-mount/">SRF Radio</a>. An <a href="http://shop.ciseco.co.uk/rf-328-arduino-atmega-328-compatible-radio-transceiver-rfu-328/">RFu328</a> (miniature ATmega328 in XBEE footprint) was used to mount and interface with the two radios. The same 3.3V power supply was used with both modules<br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-2kD9f3Dosxc/UfEwb_GzQYI/AAAAAAAAiU8/6ZEmjZ6SHMQ/s1600/20130725_145657~01.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="223" src="http://3.bp.blogspot.com/-2kD9f3Dosxc/UfEwb_GzQYI/AAAAAAAAiU8/6ZEmjZ6SHMQ/s320/20130725_145657%7E01.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Ciseco RFu328 with SRF and RFM12B&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />&lt;div&gt;The scope was connected up to measure the voltage drop across a shunt resistor as follows:&lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://1.bp.blogspot.com/-b4wYbIOje_A/Ul1TP5UF_WI/AAAAAAAAmH8/6RVoByOGZlA/s1600/scope_connection.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="319" src="http://1.bp.blogspot.com/-b4wYbIOje_A/Ul1TP5UF_WI/AAAAAAAAmH8/6RVoByOGZlA/s320/scope_connection.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Oscilloscope probe measuring voltage drop across a 10R series resistor&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;h3&gt;Hope RF RFM12B &lt;/h3&gt;Here is the RFM12B current consumption trace while sending 4 integers using the JeeLib packet structure. Using this packet structure each integer takes up 2 bytes, therefore 4 integers is 8 bytes plus 1 byte containing the node ID, this gives a total packet size of 9 bytes. Transmission takes 2.7ms and the current consumption in the time is about 24mA @ 3.3V. This gives a power and energy consumption of 24mA * 3.3V = 79.2mW * 2.7mS = 0.214mJ = 214uJ<br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-VndghVRMol4/UfD8rjHP4fI/AAAAAAAAiTU/yyEof-FXo1c/s1600/DS2_QuickPrint1.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="384" src="http://4.bp.blogspot.com/-VndghVRMol4/UfD8rjHP4fI/AAAAAAAAiTU/yyEof-FXo1c/s640/DS2_QuickPrint1.png" width="640" /></a>&lt;/div&gt;<br />&lt;h3&gt;Ciseco SRF&lt;/h3&gt;<br />A SRF V1.0a with serial firmware was used for this test.<br /><br />The SRF is serial based. Ciseco have standardized on a communication structure called <a href="http://lightweight%20local%20automation%20protocol/">LLAP (Lightweight Local Automation Protocol)</a>.  <br /><br />A LLAP packet consists of one start byte ‘a’ , two bytes for the node ID  then 9 bytes for the message. Encoding as HEX each LLAP packet can give  us space for two integers. Each integer has a range of -32767 to 32767 which is fine for our standard emonTx setup which has a maximum reading of 25000W (100A x 250Vrms).<br /><br />To transmit four integers from the emonTx (3 x power and 1 x voltage) would require two LLAP packets which each contains 12 char characters which gives a packet size of 12 bytes transmitted twice giving a total of 24 bytes.<br /><br />Here is a current capture waveform of the SRF transmitting two LLAP packets, it’s rather more interesting than the RFM12B, I would love to know exactly what the SRF is doing at each spike and dip.<br /><br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-3GCX4bQfBak/UfEFd1nw6UI/AAAAAAAAiUM/ZCtp1D6oj4c/s1600/DS2_QuickPrint2.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="384" src="http://4.bp.blogspot.com/-3GCX4bQfBak/UfEFd1nw6UI/AAAAAAAAiUM/ZCtp1D6oj4c/s640/DS2_QuickPrint2.png" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Average power consumption of 20.8mA&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://2.bp.blogspot.com/-xINKtBtwsT0/UfEFd6nhkUI/AAAAAAAAiUI/uPJg4WFD0x4/s1600/DS2_QuickPrint3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="384" src="http://2.bp.blogspot.com/-xINKtBtwsT0/UfEFd6nhkUI/AAAAAAAAiUI/uPJg4WFD0x4/s640/DS2_QuickPrint3.png" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Transmission of two LLAP packets takes 15ms&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />Transmission of two LLAP packets takes 15ms with an average current of consumption of 20.8mA. This gives and power and energy consumption of 20.8mA * 3.3V = 68.6mW * 15ms =1mJ.<br /><br />This is 4.7 times more energy than the RFM1B for the transmission of the same four integers. This is mainly due to the efficient nature of the JeeLib packet structure sending the integers as binary rather than serial characters as in the case of the SRF. Transmitting four integers as HEX characters in two LLAP packets takes 24 bytes as opposed to the 9 bytes needed for the same four integers in the RFM12B JeeLib packet structure. Taking this into account the SRF consumes 41uJ per byte where the RFM12B consumes 23uJ per byte, this is around 1.8 times more power byte for byte than the RFM12B. <br /><br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://2.bp.blogspot.com/-19szWt9GRZU/UfEFdx0XjKI/AAAAAAAAiUE/kIz-iRPiOMQ/s1600/DS2_QuickPrint4.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="384" src="http://2.bp.blogspot.com/-19szWt9GRZU/UfEFdx0XjKI/AAAAAAAAiUE/kIz-iRPiOMQ/s640/DS2_QuickPrint4.png" width="640" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;SRF startup 50mA spike&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;<br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;An interesting observation is that the SRF exhibits a rather high current spike of about 50mA as it’s turned on / comes out of sleep. As this spike only lasts for only about 100nS it won’t contribute that much to the overall power consumption.  <br /><br />&lt;h3&gt;Energy Consumed While Sleeping&lt;/h3&gt;The energy used the the RF modules needs to be put in perspective with the overall consumption of the system. An emonTx running on batteries or low power temperate node will spend much of it’s time sleeping, the ATmega328 consumes 4.3uA when sleeping and the SRF and RFM12B consume about the same when sleeping 0.2-0.3uA, giving an overall sleep mode power draw of 4.6uA or 0.0046mA.<br /><br />&lt;h4&gt;Sleeping for 10s&lt;/h4&gt;Assuming a the case of a wireless node which sleeps for 10s in between readings. This gives a energy consumption of 0.0046mA * 3.3V = 0.0152mW * 10s = 0.152mJ = 152uJ.<br /><br />If this node was using an RFM1B 1.4 times more energy would be consumed in the 3ms that the RFM12B is active while transmitting the data via RF then in the proceeding 10s when the node is sleeping <br /><br />If the temperature node was using an SRF 6.6 times more energy would be consumed in the 15ms that the SRF is active while transmitting the data via RF then in the proceeding 10s when the node is sleeping.<br /><br />&lt;h4&gt;Sleeping for 10 min&lt;/h4&gt;Assuming a the case of a wireless node which sleeps for 10s in between readings. This gives a energy consumption of 0.0046mA * 3.3V = 0.0152mW * (60s *10) =  9.13mJ.<br /><br />The energy consumed while sleeping now becomes the greatest consumer. The energy consumed during sleeping for 10s is 43 times greater than the energy required by the RFM12B to transmit the data or 9 times greater than the energy required by the SRF to transmit the data.<br /><br /><br />&lt;h3&gt;Conclusion &lt;/h3&gt;If a ATmega328 based ‘sleepy’ node sleeps for 14s or more the energy used during sleeping will equal or greater the energy used by the RFM12B (to transmit four integers). If the nodes sleeps for 1 min or more the energy used during sleeping will equal or greater then energy used by the SRF (using serial LLAP to transmit four integers).<br /><br />LLAP serial on the SRF not the most power efficient way to transmit integers compared to the RFM12B using the JeeLib packet structure. Power consumption of the SRF can be reduced at the expense of human readability of the data packets. I plan to investigate this further, see questions to answer below: <br /><br />&lt;h3&gt;Questions to answer:&lt;/h3&gt;Does the extra energy consumed by the SRF result in increased range over the RFM1B?<br /><br />The SRF by default is set at 10dBm transmission power (compared to 0dBM  for RFM12B), this can be reduced all the way down to -30dBm in various  increments, how much will this reduce energy consumption and range? Is  there a sweet spot? The RFM12B transmits at 0dBm, how will the range of  the SRF transmitting at 0dBM compare to the SRF?  <br /><br />The SRF currently transmits at 9600 baud rate, this can be increased to 115200, will this reduce the time taken to complete a transmission and therefore energy used. How much will this effect loss of packets and range? <a href="http://openmicros.org/index.php/articles/88-ciseco-product-documentation/260-srf-configuration">Ciseco SRF setup documentation. </a> <br /><br />Is it possible to interface directly with the SRF to transmit the raw packets not using serial? <br /><br />Can power consumption of SRF be improved with new firmware?<br /><br />I hear it’s possible to use the CC chip on the SRF to offload the WDT to wake up the ATmega328 using a hardware interrupt, this could result in sleep current draw of around 0.3uA. I’m keen to investigate this.&lt;/div&gt;</p>
]]></content>
  </entry>
  
</feed>
