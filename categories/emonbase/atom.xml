<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emonBase | Blog | OpenEnergyMonitor]]></title>
  <link href="https://blog.openenergymonitor.org/categories/emonbase/atom.xml" rel="self"/>
  <link href="https://blog.openenergymonitor.org/"/>
  <updated>2019-08-21T13:47:14+00:00</updated>
  <id>https://blog.openenergymonitor.org/</id>
  <author>
    <name><![CDATA[Glyn Hudson]]></name>
    <email><![CDATA[support@openenergymonitor.zendesk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pulse counting with the RFM69PI and RaspberryPi EmonBase basestation]]></title>
    <link href="https://blog.openenergymonitor.org/2015/09/pulse-counting-with-rfm69pi-and/"/>
    <updated>2015-09-06T21:08:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2015/09/pulse-counting-with-rfm69pi-and</id>
    <content type="html"><![CDATA[<p>The latest version of the RFMPi Adapter board made much of the spare digital and analog IO available for use directly on the RFMPi adapter board. D3 is one of the digital inputs available and can have an interrupt attached (INT 1) which makes it useful for pulse counting.<br /><br />By connecting a<a href="http://shop.openenergymonitor.com/optical-utility-meter-led-pulse-sensor/"> optical pulse sensor</a> directly to the <a href="http://shop.openenergymonitor.com/emonbase-raspberry-pi-web-connected-base-station/">rfm69pi adapter board</a> this can make a relatively low cost solution for internet connected pulse counting (or local logging to emoncms running on the raspberrypi). <br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-EScDwqHXgyw/VeylN7yKW2I/AAAAAAAAT2w/HzWr5pXAwMg/s1600/rfmpi_pulse.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="223" src="http://3.bp.blogspot.com/-EScDwqHXgyw/VeylN7yKW2I/AAAAAAAAT2w/HzWr5pXAwMg/s400/rfmpi_pulse.JPG" width="400" /></a>&lt;/div&gt;<br /><b>Setup</b><br /><br />1) The RJ45 connector on the optical pulse counter needs to be removed and individual wires exposed. Connect the red wire to 3.3V, the black wire to GND and the blue wire to D3:<br /><br />&lt;div class="separator" style="clear: both; text-align: center;"&gt;<a href="http://4.bp.blogspot.com/-svvRwhAQZc4/VeylOJ16QRI/AAAAAAAAT20/2s3CJ9OcOlw/s1600/rfmpi_pulse_connections.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="300" src="http://4.bp.blogspot.com/-svvRwhAQZc4/VeylOJ16QRI/AAAAAAAAT20/2s3CJ9OcOlw/s400/rfmpi_pulse_connections.JPG" width="400" /></a>&lt;/div&gt;<br />2) To use the rfm69pi adapter with pulse counting the pulse counting firmware needs to be uploaded to the rfm69pi adapter board, the steps to upload this firmware are:<br />&lt;ol&gt;&lt;li&gt;SSH into your raspberrypi running the standard OpenEnergyMonitor image.&lt;/li&gt;&lt;li&gt;Place raspberrypi in write mode: <br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ rpi-rw</span>&lt;/li&gt;&lt;li&gt;Stop emonhub: <br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ sudo service emonhub stop</span>&lt;/li&gt;&lt;li&gt;Pull in latest changes to RFM2Pi git directory: <br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ cd RFM2Pi<br />$ git pull</span>&lt;/li&gt;&lt;li&gt;Upload pulse counting firmware:<br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ avrdude -v -c arduino -p ATMEGA328P -P /dev/ttyAMA0 -b 38400 -U flash:w:/home/pi/RFM2Pi/firmware/dev/RFM69CW_RF12_Demo_ATmega328_Pulse/RFM69CW_RF12_Demo_ATmega328_Pulse.cpp.hex</span>&lt;/li&gt;&lt;li&gt;Start emonhub:<br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">$ sudo service emonhub start</span>&lt;/li&gt;&lt;/ol&gt;Next login to the local emoncms installation on the raspberrypi and navigate to the emonhub.conf editor. Add the following node definition in the nodes section of emonhub.conf:<br /><br /><span style="font-family: &quot;Courier New&quot;,Courier,monospace;">[[15]]<br />    nodename = rfmpi_pulse<br />    firmware = RFM69CW_RF12_Demo_ATmega328_Pulse<br />    hardware = rfm69pi<br />    [[[rx]]]<br />       names = power,count<br />       datacodes = h,L<br />       scales = 1,1<br />       units = W,Wh </span><br /><br />The pulse count is accumulated on the rfm69pi until the rfm69pi is reset either by an outage or by turning off and on the power.<br /><br />To record the total accumulated pulse count in emoncms use the  wh_accumulator input process which detects resets continuing the total  pulse count accumulation from the last value before the reset.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi - A new type of RAM]]></title>
    <link href="https://blog.openenergymonitor.org/2013/10/raspberry-pi-new-type-of-ram/"/>
    <updated>2013-10-22T15:45:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/10/raspberry-pi-new-type-of-ram</id>
    <content type="html"><![CDATA[<p>If you’ve had trouble booting up your Raspberry Pi then read on…<br /><br />The latest batch of <a href="http://shop.openenergymonitor.com/raspberry-pi/">Raspberry Pi’s we have been selling through the shop</a> (manufactured in South Wales, UK) have use a new type of RAM chip.<br /><br />Previously the Pi used a Samsung chip, they have now switched to using a chip manufactured by Micron marked with 3KA18 D9QHN and an ‘M’ logo. This chip is visible in the middle of the photo below mounted on top of the processor using their cleaver package-on-package technology. This RAM chip is still 512Mb in size<br /><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://1.bp.blogspot.com/-hi1o4excuDg/UmaYiLZRV3I/AAAAAAAAmYM/eXeI6tSf-o4/s1600/20131022_104438.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="300" src="http://1.bp.blogspot.com/-hi1o4excuDg/UmaYiLZRV3I/AAAAAAAAmYM/eXeI6tSf-o4/s400/20131022_104438.jpg" width="400" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Raspberry Pi with new type of RAM chip&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-6oxbmc7qi08/UmacKTOlt1I/AAAAAAAAmYc/lVnng72YWEg/s1600/RPI_SOC_03.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="173" src="http://3.bp.blogspot.com/-6oxbmc7qi08/UmacKTOlt1I/AAAAAAAAmYc/lVnng72YWEg/s320/RPI_SOC_03.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Older Samsung RAM chip&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;To my knowledge there has been no evidence that the new chip give any performance benefit, the change is probably due to cost or logistic reasons. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;<br />&lt;/div&gt;<b>This new chip requires a firmware update to work. Our current SD card images (e.g oemgateway_24sep2013.img) won’t boot with the new RAM; static red PWR LED and nothing else. </b><br /><b><br /></b><b>To make the Raspberry Pi boot you will need to download the following files and put them in the SD cards FAT (boot) partition overwriting the older files: </b><br /><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/fixup.dat">https://github.com/raspberrypi/firmware/raw/master/boot/fixup.dat</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/bootcode.bin">https://github.com/raspberrypi/firmware/raw/master/boot/bootcode.bin</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/fixup_cd.dat">https://github.com/raspberrypi/firmware/raw/master/boot/fixup_cd.dat</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/fixup.dat">https://github.com/raspberrypi/firmware/raw/master/boot/fixup.dat</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/fixup_x.dat">https://github.com/raspberrypi/firmware/raw/master/boot/fixup_x.dat</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/kernel_emergency.img">https://github.com/raspberrypi/firmware/raw/master/boot/kernel_emergency.img</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/kernel.img">https://github.com/raspberrypi/firmware/raw/master/boot/kernel.img</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/start_cd.elf">https://github.com/raspberrypi/firmware/raw/master/boot/start_cd.elf</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/start.elf">https://github.com/raspberrypi/firmware/raw/master/boot/start.elf</a><br /><a href="https://github.com/raspberrypi/firmware/raw/master/boot/start_x.elf">https://github.com/raspberrypi/firmware/raw/master/boot/start_x.elf</a><br /><br />Alternative you could download the whole Raspberry Pi firmware repository (95.6Mb) and copy out the files from the boot directory <a href="https://github.com/raspberrypi/firmware/archive/master.zip">https://github.com/raspberrypi/firmware/archive/master.zip</a><br /><br />I’m currently working on getting a new ready-to-go SD card image download uploaded with the changes above included. This should be available to download soon from: <a href="http://emoncms.org/site/docs/raspberrypigateway">http://emoncms.org/site/docs/raspberrypigateway</a>. Look for the 22nd Oct 2013 image.<br /><br />All SD cards purchased in the shop after today will have the new image which works on the Raspberry Pi’s with the new RAM.<br />&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;Onwards! &lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RaspberryPI: SD Cards, HDD, Gateway Forwarder]]></title>
    <link href="https://blog.openenergymonitor.org/2013/09/raspberrypi-sd-cards-hdd-gateway/"/>
    <updated>2013-09-25T16:44:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/09/raspberrypi-sd-cards-hdd-gateway</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">After several&nbsp;<a href="http://openenergymonitor.blogspot.co.uk/2013/04/introducing-rfm12pi-v2-raspberry-pi.html?q=raspberry+pi">Raspberry Pi emonBase</a>&nbsp;SD card failures between myself and Glyn in the last two weeks and the general experience of short SD card lifespan&nbsp;<a href="http://openenergymonitor.org/emon/node/2292">on the forums</a>&nbsp;(SD cards have a limited number of writes), we thought we'd make a concerted effort this week to move the openenergymonitor Raspberry Pi documentation, pi images and pre-installed SD cards over to the more stable solutions:</div>
<p><br />&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;<a href="http://3.bp.blogspot.com/-0z_9GxPBEr0/UkKqHnyLZRI/AAAAAAAAkmA/5m3pIXesesA/s1600/20130820_191803.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="http://3.bp.blogspot.com/-0z_9GxPBEr0/UkKqHnyLZRI/AAAAAAAAkmA/5m3pIXesesA/s320/20130820_191803.jpg" width="320" /></a>&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Raspberry Pi emonBase with <a href="http://shop.openenergymonitor.com/raspberry-pi/">RFM12Pi</a> in Pibow Timber Case&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;1. We read <a href="http://harizanov.com/2013/08/rock-solid-rfm2pi-gateway-solution/">Martin Harizanov’s blog post</a> on creating a rock-solid gateway using a read-only filesystem with <a href="http://openenergymonitor.org/emon/user/1531">Jerome Lafréchoux’s</a> excellent python <a href="https://github.com/Jerome-github/oem_gateway">oem_gateway</a> to forward data to <a href="http://emoncms.org/">emoncms.org</a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;This is a reliable solution which is simple to setup and works well if you just want to forward data to a remote emoncms server like emoncms.org. We have created a Raspberry Pi SD card image for this read-only filesystem oem_gateway setup, see documentation page for full details, there’s a link to download it there too:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="http://emoncms.org/site/docs/raspberrypigateway">http://emoncms.org/site/docs/raspberrypigateway</a>&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The ready-to-go pre-loaded SD card available in the shop will be pre-loaded with this image from now on. &lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;2. We also heard from <a href="http://openenergymonitor.org/emon/node/2292">Paul Reed about his setup</a> where the SD card is just used to boot an external hard drive (powered by a USB hub) with the Pi’s root partition running a web server and the full version of emoncms on the external hard drive. This solution is great if you want to keep your data locally or have an additional backup. This could also double up as a 24/7 file server running in your home for music streaming, document backup etc.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Glyn’s using the read-only gateway for his setup and I’m going to setup the hard drive local backup in addition to forwarding to emoncms.org for mine.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<br />&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Here’s a diagram that illustrates these different options, including the NanodeRF, local and remote storage, backup options and emoncms data storage options (mysql, timestore etc):&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;<a href="http://3.bp.blogspot.com/-1yBlyXKWE8k/UkBuY7OxrbI/AAAAAAAACww/Hbm3i0PkobM/s1600/overview.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="452" src="http://3.bp.blogspot.com/-1yBlyXKWE8k/UkBuY7OxrbI/AAAAAAAACww/Hbm3i0PkobM/s640/overview.png" width="640" /></a>&lt;/div&gt;If your not sure which way to go, its probably easiest to start with the Raspberry Pi oem_gateway forwarder to emoncms.org, you can re-configure it for local storage and backup via an external harddrive if you want later. If your more comfortable with Arduino code than the Raspberry Pi and linux then the <a href="http://shop.openenergymonitor.com/nanoderf/">NanodeRF (pre-assembled SMT)</a> may be best for you.<br />&lt;div&gt;<br />&lt;/div&gt;&lt;div&gt;To summarise the above with pros and cons, here are the two main emonBase Raspberry Pi options:<br />&lt;div&gt;<br /><b>1. Run a read only filesystem on the Pi and forward data straight to a remote emoncms server.</b><br /><b>Developed by Jerome Lafréchoux and Martin Harizanov’s</b><br /><a href="http://harizanov.com/2013/08/rock-solid-rfm2pi-gateway-solution/">http://harizanov.com/2013/08/rock-solid-rfm2pi-gateway-solution/</a><br />&lt;ul&gt;&lt;li&gt;+ More robust and easier to setup&lt;/li&gt;&lt;li&gt;+ Cheaper and lower power than using an external HDD&lt;/li&gt;&lt;li&gt;- Does not utilise the full potential of the Pi&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Run IPE – Industrial Perennial Environment a special blackout-proof flavour of Raspbian which can be locked down after setup to work in read only mode&lt;/li&gt;&lt;li&gt;The <a href="https://github.com/Jerome-github/oem_gateway">Oem Gateway Python scrip</a>t by Jérôme Lafréchoux to forward the data received by the RFM12Pi straight to emoncms.org&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;<b>2. Move the Pi’s file system to an external HDD using the SD card only to boot </b><br />This option requires an external hard drive connected to the Pi through a powered USB hub. This does require extra expense and an increase in power consumption, the hard drive we tested here a 1TB USB hard drive adds 1.8W to the power consumption of the Pi (3.9W). However this option does have several advantages:<br />&lt;ul&gt;&lt;li&gt;+ Ability to run emoncms on the Pi to log data locally and have full control over your setup as well as forwarding data to a remote emoncms server.&lt;/li&gt;&lt;li&gt;+ You now have the potential to have 24/7 file server running in your house for music streaming document backup etc.&lt;/li&gt;&lt;li&gt;- More complicated to setup&lt;/li&gt;&lt;li&gt;- Higher cost and power consumption&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Queuing packets on the basestation and bulk sending to emoncms]]></title>
    <link href="https://blog.openenergymonitor.org/2012/11/queuing-packets-on-basestation-and-bulk/"/>
    <updated>2012-11-14T18:18:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2012/11/queuing-packets-on-basestation-and-bulk</id>
    <content type="html"><![CDATA[<p>As we connect more and more wireless nodes to a basestation, with each wireless node transmitting every 10s or so we quickly start to have a situation where the basestation is trying to make several connections to the server every second. <br /> <br />The question is, does the rate of connections matter? Is it bad news for the emoncms server and what is the effect on the local internet connection, router? <br /> <br />Although I have not investigated this in detail, Im pretty sure Im seeing an adverse effect on my internet connection if the post rate gets too high, I noticed this especially the other day when I changed my router to a bt homehub after a lighting strike took out the old router. It would be great to get some good data on this. <br /> <br />Then there is the question of server load which needs more investigation. <br /><br />Jumping to a solution before the problem is properly characterized, the solution that comes to mind is to queue packets received from wireless nodes in the basestation and then do a bulk post at a slower rate, such as once every 20s or longer. <br /> <br />I have put together an initial working example of this, including code for both the NanodeRF basestation end and the emoncms server end. <br /><br />Starting with the NanodeRF code: <br /><a href="https://github.com/openenergymonitor/NanodeRF/tree/master/NanodeRF_multinode_bulksend">https://github.com/openenergymonitor/NanodeRF/tree/master/NanodeRF_multinode_bulksend</a> <br /> <br />The NanodeRF code queues packets received, including a time offset between packets so that they can be stored in emoncms at the right time when they get there (although the implementation for this is a little rough at the moment). <br /> <br />The packets are queued in a string that can be sent via the ethernet and then decoded simply in emoncms using json_decode(); <br /> <br />A string for 3 packets from the different nodes looks like this: <br />[[0,16,1137],[2,17,1437,3164],[4,19,1412,3077]] <br /> <br />The first node: [0,16,1137] <br /> <br />The first number of each node is the time offset, so for the first node it is 0 which means the packet for the first node arrived at 0 seconds. The second node arrived at 2 seconds and 3rd 4 seconds. <br /> <br />The second number is the node id, this is the unqiue identifer for the wireless node. <br /> <br />All the numbers after the first two are data values. The first node here (node 16) has only once data value: 1137. <br /><br />This string is sent to emoncms every 20s in the example and there is enough room in the string buffer to store up to 400 characters or about 22 low power temperature node packets, this may be extendible by another 200 characters for more storage, and maybe a lot further with an SD card or other larger storage medium. <br /> <br />The emoncms api for sending bulk data is emoncms.org/input/bulk?data= <br /> <br />Emoncms then decodes the string, registers and processes the inputs and returns an ok. <br /> <br />If your interested in testing this out, here’s the NanodeRF bluksend example again, if your using the NanodeRF_multinode code already this is just a straight switch to the bulk send code: <br /><a href="https://github.com/openenergymonitor/NanodeRF/tree/master/NanodeRF_multinode_bulksend">https://github.com/openenergymonitor/NanodeRF/tree/master/NanodeRF_multinode_bulksend</a> <br /> <br />If your running your own server you will need the latest emoncms version: <br /><a href="https://github.com/emoncms/emoncms">https://github.com/emoncms/emoncms</a> or if you are using emoncms.org its all ready to go there. <br /> <br />There’s a couple of question marks at the moment as to the stability of this initial working example, I had a few problems with the queue string getting malformed but only once every 20-30 successful string builds and at the moment the nanodeRF does not reset itself using the watchdog if there are more than 10 unsucessful attempts. A few extra eye’s on the code would definetly help to improve it and I will keep testing here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi emonBase]]></title>
    <link href="https://blog.openenergymonitor.org/2012/11/raspberry-pi-emonbase/"/>
    <updated>2012-11-08T13:16:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2012/11/raspberry-pi-emonbase</id>
    <content type="html"><![CDATA[<div><div class="separator" style="clear: both; text-align: left;">The&nbsp;<a href="http://www.raspberrypi.org/">Raspberry Pi</a>&nbsp;needs no introduction, it's a great&nbsp;piece&nbsp;of hardware. A low power, low cost Linux credit-card sized computer <a href="http://www.raspberrypi.org/archives/1925">made in the UK</a>. As soon as we heard of the Raspberry Pi we knew it would make a great emonBase energy monitoring base station.&nbsp;</div><div class="separator" style="clear: both; text-align: left;"><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-Y9nfjgrsqKs/UJuiaRDJ7gI/AAAAAAAAcwo/WXkyHHCR48M/s1600/onpi_rfm12pi.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="400" src="http://4.bp.blogspot.com/-Y9nfjgrsqKs/UJuiaRDJ7gI/AAAAAAAAcwo/WXkyHHCR48M/s400/onpi_rfm12pi.png" width="231" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Raspberry Pi with RFM12Pi Expansion</td></tr></tbody></table></div><br /><div class="" style="clear: both; text-align: left;">The Raspberry Pi is powerful enough to run a web server running&nbsp;<a href="http://emoncms.org/">emoncms</a>&nbsp;open-source logging and visualisation&nbsp;web-app while being low power enough to be left running 24/7.&nbsp;&nbsp;</div><div class="" style="clear: both; text-align: left;"><br /></div><div class="" style="clear: both; text-align: left;">Using the Raspberry Pi to log energy monitoring data locally (onto it's SD card) has advantage of not having to be reliant on a stable web connection when logging to a remote sever and gives you total control over your data.&nbsp;</div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: left;">Working with <a href="http://harizanov.com/">Martin Harizanov</a> we have designed an open-source expansion board for the Raspberry Pi which enables the Pi to&nbsp;receive data via&nbsp;wireless&nbsp;from other <a href="http://openenergymonitor.org/emon/Modules">OpenEnergyMonitor modules</a> e.g <a href="http://openenergymonitor.org/emon/emontx">emonTx</a>&nbsp;energy and temperature monitoring node or an <a href="http://openenergymonitor.org/emon/emonglcd">emonGLCD</a>&nbsp;wireless LCD display. The <a href="http://wiki.openenergymonitor.org/index.php?title=Raspberry_Pi">RFM12Pi</a> is now&nbsp;available&nbsp;to buy through the&nbsp;<a href="http://shop.openenergymonitor.com/base-stations/">OpenEnergyMonitor shop</a>.</div><div class="separator" style="clear: both; text-align: left;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-BWrzzL7OceI/UJuiUJu-jDI/AAAAAAAAcwg/Xn8yXpzxDnw/s1600/front_rfm12pi.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="320" src="http://3.bp.blogspot.com/-BWrzzL7OceI/UJuiUJu-jDI/AAAAAAAAcwg/Xn8yXpzxDnw/s320/front_rfm12pi.png" width="264" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">RFM12Pi Raspberry Pi GPIO Wireless Expansion Board &nbsp;</td></tr></tbody></table><br /><div class="" style="clear: both; text-align: left;">A&nbsp;Raspberry Pi running <a href="http://openenergymonitor.org/emon/emoncms">emoncms</a>&nbsp;with an RFM12Pi expansion board can be used as a powerful emonBase base-station to log, process and visualise energy, temperature and other environmental data.&nbsp;Data can be logged locally to the Raspberry Pi's SD card and/or to a remote emoncms server. Emoncms graphs and dashboards are served from the Raspberry Pi's web-server. Checkout the documentation links below for more information and setup instructions. In the future we plan to release a 'ready to go' Pi SD card image with emoncms pre installed and configured to work with the RFM12Pi. &nbsp;</div><div class="" style="clear: both; text-align: left;"><br /></div><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-tTKGHG8tpjA/UJusZnNttsI/AAAAAAAAcw8/QfaOK8MfGtQ/s1600/A6uBBGOCAAAelQ3.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="383" src="http://4.bp.blogspot.com/-tTKGHG8tpjA/UJusZnNttsI/AAAAAAAAcw8/QfaOK8MfGtQ/s400/A6uBBGOCAAAelQ3.png" width="400" /></a></td></tr><tr><td class="tr-caption">Thanks to <a href="http://baptistegaultier.fr/emoncms/baptiste">Baptiste Gaultier</a>&nbsp;for this nice emoncms dashboard example</td></tr></tbody></table><div class="separator" style="clear: both;"></div><br /><b>Documentation Links:</b><br /><br /><ul><li>RFM12Pi Setup Guide &amp; Documentation Wiki:&nbsp;<a href="http://wiki.openenergymonitor.org/index.php?title=Raspberry_Pi">http://wiki.openenergymonitor.org/index.php?title=Raspberry_Pi</a></li><li>RFM12Pi Shop Item:&nbsp;<a href="http://shop.openenergymonitor.com/raspberry-pi/">http://shop.openenergymonitor.com/raspberry-pi/</a></li></ul><br /><br /></div>
]]></content>
  </entry>
  
</feed>
