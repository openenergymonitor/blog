<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: benchmarking | Blog | OpenEnergyMonitor]]></title>
  <link href="https://blog.openenergymonitor.org/categories/benchmarking/atom.xml" rel="self"/>
  <link href="https://blog.openenergymonitor.org/"/>
  <updated>2019-06-11T13:21:46+00:00</updated>
  <id>https://blog.openenergymonitor.org/</id>
  <author>
    <name><![CDATA[Glyn Hudson]]></name>
    <email><![CDATA[support@openenergymonitor.zendesk.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rethinking the data input and storage core of emoncms: benchmarks]]></title>
    <link href="https://blog.openenergymonitor.org/2013/06/rethinking-data-input-and-storage-core/"/>
    <updated>2013-06-27T21:55:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/06/rethinking-data-input-and-storage-core</id>
    <content type="html"><![CDATA[<table>
  <tbody>
    <tr>
      <td>Over the last few days I’ve been looking again at the core data input, storage and access part of emoncms. There is definitely a lot of opportunity to improve performance and there are a lot of options so I thought I would start to do some more systematic benchmarking.<br /><br />So here are some initial benchmarks of feed data storage in different storage engines: mysql (myisam vs innodb), timestore and direct file access. I also thought Id have a go at writing the current implementation of input processing in both python and nodejs in addition to php to learn a bit more about these languages as they are being used and favoured by others in the community such as Jerome (python), Houseahedron (python) and Jean Claude Wippler of Jeelabs (nodejs). Id like to see if there is any measurable difference in performance between these different languages for the kind of application that we are developing and if there are any other benefits: easier to do certain things etc.<br /><br /><a href="http://jeelabs.org/tag/housemon/">Housemon</a> by Jean Claude Wippler is a good example of how a timeseries data storage and visualisation application can be implemented in a different way by using a mixture of direct file storage and a redis in-memory database with the server side part of the application written in nodejs.<br /><br />Intrigued by the idea of using direct file storage as Jean Claude Wippler does in Housemon and following the approach used by Mike Stirling in timestore of using a fixed time interval to simplify and speed up searching I had a go at writing a basic implementation using php file access and the results are good.<br /><br />&lt;div&gt;<span style="font-size: x-large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#storage-engine-test"></a>Storage engine test</span><br /><br />All tested on a raspberrypi, running off the standard SanDisk SDHC 4Gb SD Card. &lt;/div&gt;&lt;div&gt;<br /><span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#mysql"></a>MYSQL</span><br /><br /><a href="https://github.com/emoncms/experimental/blob/master/storage/MYSQL/mysql.php">https://github.com/emoncms/experimental/blob/master/storage/MYSQL/mysql.php</a><br />&lt;ul&gt;&lt;li&gt;InnoDB INSERT 1000 points 21s,25s,20s (Normalised to 100,000 ~ 2200s)&lt;/li&gt;&lt;li&gt;InnoDB INSERT 10000 points 167s,183s (Normalised to 100,000 ~ 1750s)&lt;/li&gt;&lt;li&gt;MYISAM INSERT 10000 points 15-17s (Normalised to 100,000 ~ 160s)&lt;/li&gt;&lt;li&gt;MYISAM INSERT 100000 points 165s&lt;/li&gt;&lt;/ul&gt;<b>MYISAM</b></td>
      <td>INNODB READ&lt;/b&gt;<br /><br />Benchmark of current emoncms mysql read function that selects given number of datapoints over a time window.<br /><br />MYISAM results on the left</td>
      <td>INNODB results on the right<br /><br /><a href="https://github.com/emoncms/experimental/blob/master/storage/MYSQL/mysql_read.php">https://github.com/emoncms/experimental/blob/master/storage/MYSQL/mysql_read.php</a><br /><br />10000 datapoint table:<br />&lt;ul&gt;&lt;li&gt;1000dp over 5 hours (average method) 232ms</td>
      <td>391ms&lt;/li&gt;&lt;li&gt;1000dp over 24 hours (average method) 424ms</td>
      <td>675ms&lt;/li&gt;&lt;/ul&gt;1000000 datapoint table: (115 days @ 10s)<br />&lt;ul&gt;&lt;li&gt;all 0.2 hours (all method) 40ms</td>
      <td>38ms&lt;/li&gt;&lt;li&gt;all 0.5 hours (all method) 58ms</td>
      <td>55ms&lt;/li&gt;&lt;li&gt;all over 1 hours (all method) 90ms</td>
      <td>82ms&lt;/li&gt;&lt;li&gt;all over 1.3 hours (all method) 108ms</td>
      <td>100ms&lt;/li&gt;&lt;li&gt;1000dp over 3 hours (average method) 237ms</td>
      <td>272ms&lt;/li&gt;&lt;li&gt;1000dp over 5 hours (average method) 280ms</td>
      <td>327ms&lt;/li&gt;&lt;li&gt;1000dp over 24 hours (average method) 726 ms</td>
      <td>949ms&lt;/li&gt;&lt;li&gt;1000dp over 48 hours (average method) 1303 ms</td>
      <td>1767ms&lt;/li&gt;&lt;li&gt;1000dp over 52 hours (php loop method) 2875 ms</td>
      <td>2650ms&lt;/li&gt;&lt;li&gt;1000dp over 100 hours (php loop method) 3124 ms</td>
      <td>2882ms&lt;/li&gt;&lt;li&gt;1000dp over 200 hours (php loop method) 2934 ms</td>
      <td>2689ms&lt;/li&gt;&lt;li&gt;1000dp over 400 hours (php loop method) 2973 ms</td>
      <td>2749ms&lt;/li&gt;&lt;li&gt;1000dp over 2000 hours (php loop method) 2956 ms</td>
      <td>2762ms&lt;/li&gt;&lt;li&gt;1000dp over 2600 hours (php loop method) 2969 ms</td>
      <td>2767ms&lt;/li&gt;&lt;/ul&gt;PHP loop method timing may be quite a bit longer if the server is under heavy load as it involves making many separate mysql queries, each query needs to wait for other queries in the mysql process list to complete.<br />&lt;ul&gt;&lt;li&gt;Initial benchmarking results on netbook: <a href="http://emoncms.org/site/docs/developdatastorage">http://emoncms.org/site/docs/developdatastorage</a>&lt;/li&gt;&lt;li&gt;Recent blog post on current emoncms implementation: <a href="http://openenergymonitor.blogspot.co.uk/2013/05/the-current-emoncms-feed-storage.html">The current feed storage implementation</a>&lt;/li&gt;&lt;/ul&gt;<span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#timestore"></a>Timestore</span><br /><br />Timestore is a promising solution, developed specifically for timeseries data, written by Mike Stirling.<br />Blog post on timestore: <a href="http://openenergymonitor.blogspot.com/2013/06/timestore-timeseries-database.html">Timestore timeseries database</a><br /><br /><a href="https://github.com/emoncms/experimental/blob/master/storage/timestore/timestore.php">https://github.com/emoncms/experimental/blob/master/storage/timestore/timestore.php</a><br />&lt;ul&gt;&lt;li&gt;10000 inserts 52s&lt;/li&gt;&lt;li&gt;100,000 inserts 524s&lt;/li&gt;&lt;/ul&gt;<a href="https://github.com/emoncms/experimental/blob/master/storage/timestore/timestore_read.php">https://github.com/emoncms/experimental/blob/master/storage/timestore/timestore_read.php</a><br />&lt;ul&gt;&lt;li&gt;Read 1000 datapoints over 5 hours: 45ms&lt;/li&gt;&lt;li&gt;Read 10 datapoints over 5 hours 20ms&lt;/li&gt;&lt;/ul&gt;Includes layer averaging and multiple layers so there is quite a bit more going on (that would still need to be added to other implementations like direct file and mysql above), so benchmarks are not directly comparable.<br /><br /><span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#direct-file"></a>Direct file</span><br />For some reason I did not think this method would work as well as the benchmarks show but its great that it does because from an implementation point of view its really simple and very flexible as its easy to modify the code to do what you want, see the examples linked:<br />&lt;ul&gt;&lt;li&gt;<a href="https://github.com/emoncms/experimental/blob/master/storage/directfiles/write.php">Direct file write 100,000</a>: 6-7s&lt;/li&gt;&lt;li&gt;<a href="https://github.com/emoncms/experimental/blob/master/storage/directfiles/write_openclose.php">Direct file write 100,000</a> open and close each time: 27,24,26s&lt;/li&gt;&lt;li&gt;<a href="https://github.com/emoncms/experimental/blob/master/storage/directfiles/read.php">Direct file read 1000</a> datapoints over 5 hours of 10 second data in 85-88ms&lt;/li&gt;&lt;li&gt;Reads 1000 datapoints over 200 hours of 10 second data in 93ms&lt;/li&gt;&lt;li&gt;Reads 1000 datapoints over 2000 hours of 10 second data in 130ms&lt;/li&gt;&lt;li&gt;Reads 1000 datapoints over 2600 hours of 10 second data in 124ms&lt;/li&gt;&lt;/ul&gt;<span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#redis"></a>Redis</span><br />For a short term storage, storage to disk may not be necessary, instead we can store data in memory using an in-memory database like redis. Benchmarks to add.<br /><br />Blog post: <a href="http://openenergymonitor.blogspot.com/2013/06/idea-for-using-redis-in-memory-database.html">Redis idea</a><br /><br /><span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#other-ideas-for-storage-format"></a>Other ideas for storage format</span><br />&lt;ul&gt;&lt;li&gt;<a href="http://openenergymonitor.blogspot.com/2013/06/removing-redundant-datapoints-part-1.html">Removing redundant datapoints - part 1</a>&lt;/li&gt;&lt;li&gt;<a href="http://openenergymonitor.blogspot.com/2013/06/removing-redundant-datapoints-algorithm.html">Removing redundant datapoints – algorithm 1</a>&lt;/li&gt;&lt;/ul&gt;<span style="font-size: large;">Languages</span><br />What about the programming language? No benchmarks yet but interesting to look at the difference in how the code looks. I found each language pretty straightforward to use and online resources to get me passed the bits I didn’t know where readily available. The language links below show the core parts of the input processing stage of emoncms written in php, nodejs and python. I’ve also linked to emonweb a port of emoncms (or more a build in its own right be now) by Frank Oxener in ruby on rails.<br />&lt;ul&gt;&lt;li&gt;<a href="https://github.com/emoncms/experimental/tree/master/php">PHP</a>&lt;/li&gt;&lt;li&gt;<a href="https://github.com/emoncms/experimental/tree/master/nodejs">nodejs</a>&lt;/li&gt;&lt;li&gt;<a href="https://github.com/emoncms/experimental/tree/master/python">python</a>&lt;/li&gt;&lt;li&gt;ruby <a href="https://github.com/dovadi/emonWeb">https://github.com/dovadi/emonWeb</a> (Frank Oxener)&lt;/li&gt;&lt;li&gt;go &lt;/li&gt;&lt;/ul&gt;<span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#servers"></a>Servers</span><br />&lt;ul&gt;&lt;li&gt;Apache&lt;/li&gt;&lt;li&gt;nginx <a href="http://www.ismsolar.com/sistema-de-monitorizacion-de-alto-rendimiento">http://www.ismsolar.com/sistema-de-monitorizacion-de-alto-rendimiento</a>&lt;/li&gt;&lt;/ul&gt;<span style="font-size: large;"><a href="https://github.com/emoncms/experimental/blob/master/readme.md#emoncmsorg-stats"></a>Emoncms.org stats</span><br />&lt;ul&gt;&lt;li&gt;<a href="http://openenergymonitor.blogspot.com/2013/05/emoncmsorg-load-stats.html">Emoncms.org load stats</a>&lt;/li&gt;&lt;/ul&gt;<span style="font-size: x-large;">HouseMon</span><br /><br />HouseMon by Jean Claude Wippler stores data in 3 forms: &lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Raw log of the serial data received to file (compressed daily) &lt;/li&gt;&lt;li&gt;Redis in-memory storage for last 48 hours which makes for quick access of most recent data. &lt;/li&gt;&lt;li&gt;Archival storage via direct file access for data older than 48 hours, the archive is hourly aggregated data (hourly - unless a use case demands finer resolution at which point the archive can be rebuilt from the raw logs). &lt;/li&gt;&lt;/ul&gt;<a href="http://jeelabs.org/2013/02/17/data-data-data/">http://jeelabs.org/2013/02/17/data-data-data/ </a><br /><a href="http://jeelabs.org/2013/02/18/who-needs-a-database/">http://jeelabs.org/2013/02/18/who-needs-a-database/ </a><br /><br />Its quite clear from some of the above tests that the housemon implementation is going to be fast in terms of data access speeds (with redis storing everything in memory for the last 48 hours) and efficient in terms of data storage (binary files – hourly data), the big difference is that full resolution data is not available after 48 hours but Jean Claude Wippler argues that it would be better to wait for a use case rather than implement higher resolution for higher resolution sake and that logs can be used to rebuild archives at higher resolution if needed anyway.&lt;/div&gt;&lt;div&gt;<br />&lt;/div&gt;<span style="font-size: large;">Next steps</span><br /><br />If you have a standard emoncms raspberrypi install, changing the mysql storage engine to myisam should bring immediate performance improvements, especially if you have a lot of feeds being recorded, I will try and put together a script to make this easier and also update the ready to go image.<br /><br />The next development step I think is to integrate redis into emoncms by rebuilding the input processing implementation to use redis rather than go to disk to get the last feed and input values. Then it would be good to test both timestore and the integrated direct file storage in action on several parallel raspberrypi’s, keep benchmarking the differences and then see where that gets us.</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Year of Solar PV Monitoring]]></title>
    <link href="https://blog.openenergymonitor.org/2013/05/one-year-of-solar-pv-monitoring/"/>
    <updated>2013-05-13T20:27:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2013/05/one-year-of-solar-pv-monitoring</id>
    <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">On the 23rd November 2011 we have had a 2.9Kwp solar PV installed.&nbsp;</div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-6Zd9PL-5AJE/UZEzH7aGB9I/AAAAAAAAeog/-tocRt1M_OA/s1600/Panels.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="177" src="http://3.bp.blogspot.com/-6Zd9PL-5AJE/UZEzH7aGB9I/AAAAAAAAeog/-tocRt1M_OA/s320/Panels.png" width="320" /></a></div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;">We recently got our first payment from the<a href="http://www.fitariffs.co.uk/eligible/levels/">&nbsp;UK's&nbsp;governments&nbsp;Feed In Tariff</a>&nbsp;scheme.&nbsp;This has prompted me to take stock of how the system has been performing and how the data collected using the OpenEnergyMonitor energy monitoring system compares to the utility&nbsp;company's&nbsp;billing meter:</div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both;">From the 23rd Nov 2011 - 23rd Nov 2012 the billing utility meter on the solar PV system has recorded a &nbsp;<b>generation of 2069 kWh</b>. Over the same period we consumed 3588&nbsp;Kwh, <b>57% of our electrical energy needs have been met by the solar PV.&nbsp;</b></div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;">At this rate it looks like we're on track for the system to pay back in 7-8 years, maybe even less if we have some more sun in the next few years, fingers crossed!&nbsp;</div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;">For the same time period the OpenEnergyMonitor monitoring system has recorded a generation of 2029 kWh, giving the <b>energy monitor an accuracy of 98%!&nbsp;</b></div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;">The monitoring system is a standard&nbsp;<a href="http://shop.openenergymonitor.com/solar-pv-monitor-kit-bundle-433mhz-euro-plug/">emonTx with an AC-AC adapter taking Real Power readings</a>.&nbsp;</div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://1.bp.blogspot.com/-BSjVQR4ViYY/UZFElq6OGdI/AAAAAAAAeow/VV4iTj7-PmI/s1600/Selection_014.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="276" src="http://1.bp.blogspot.com/-BSjVQR4ViYY/UZFElq6OGdI/AAAAAAAAeow/VV4iTj7-PmI/s640/Selection_014.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">One Year of PV Generation</td></tr></tbody></table>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-aBI-v-iDQ9Q/UZHtMP1ludI/AAAAAAAAepM/zz59PUGZ0lE/s1600/Selection_015.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="228" src="http://2.bp.blogspot.com/-aBI-v-iDQ9Q/UZHtMP1ludI/AAAAAAAAepM/zz59PUGZ0lE/s640/Selection_015.png" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Kwh/d Electricity Consumption (orange) Overlaid&nbsp;with Generation (blue)&nbsp;</td></tr></tbody></table>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;">When the system was installed the solar PV company&nbsp;estimated&nbsp;we would produce&nbsp;2434 Kwh per year, we generated 15% less than this estimate. This could partly be&nbsp;attributed&nbsp;to the very poor summer we&nbsp;experienced&nbsp;in 2012.</div>
<div><span style="background-color: white; font-family: Arial, Verdana, sans-serif; font-size: 13px;"><br /></span></div>
<div class="separator" style="clear: both; text-align: left;">This year is already looking promising, on the 2nd of May 2013 our system generated a record (for us) of 18.3 Kwh 1.9 times more than we consumed on that day (9.7 Kwh):</div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<div class="separator" style="clear: both; text-align: left;"><br /></div>
<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-XTd1UQbWGI4/UZEv6lkOiTI/AAAAAAAAeoU/EFmdCDAIG9I/s1600/New+PV+record+2nd+May+2013.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="640" src="http://4.bp.blogspot.com/-XTd1UQbWGI4/UZEv6lkOiTI/AAAAAAAAeoU/EFmdCDAIG9I/s640/New+PV+record+2nd+May+2013.png" width="451" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Record Generation on 2nd May 2013</td></tr></tbody></table>
<p>Fingers crossed for a sunny 2013 summer!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting visual]]></title>
    <link href="https://blog.openenergymonitor.org/2012/06/getting-visual/"/>
    <updated>2012-06-04T12:57:00+00:00</updated>
    <id>https://blog.openenergymonitor.org/2012/06/getting-visual</id>
    <content type="html"><![CDATA[<div dir="ltr" style="text-align: left;" trbidi="on">The Open Energy Monitor is all about getting visual. Using hardware to post collected data to emonCMS basically transforms the acquired data into easily understandable informations, and what's better than graphs.<br />Here is a <a href="https://power2switch.com/" target="_blank">similar initiative</a> that converts absurd electricity bills into meaningful information:<br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://2.bp.blogspot.com/-PY9KdI3eIt4/T8ygPLITPtI/AAAAAAAAAQ4/a67-09plce8/s1600/p2s-bill-redesign-v16.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="640" src="http://2.bp.blogspot.com/-PY9KdI3eIt4/T8ygPLITPtI/AAAAAAAAAQ4/a67-09plce8/s640/p2s-bill-redesign-v16.jpg" width="492" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">Source: <a href="http://www.fastcodesign.com/1669931/how-a-redesigned-electricity-bill-could-make-you-smarter-and-save-cash" target="_blank">FastCoDesign.com</a></td></tr></tbody></table>You can compare it with with the old bill:<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-E7YYVFYZ41s/T8yjo2P1PwI/AAAAAAAAARE/xvE3r5-85ig/s1600/comed-bill-jan-2011-1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-E7YYVFYZ41s/T8yjo2P1PwI/AAAAAAAAARE/xvE3r5-85ig/s400/comed-bill-jan-2011-1.jpg" width="400" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div>It is obvious that presenting the same information in a different way makes a big difference. The redesigned bill is much easier to understand, and the use of shapes and colors turns something very abstract into tangible information.<br /><br />But I believe that if we really want to democratize energy monitoring, we should take it one step further. We should offer people who have no idea what 4.2 kW or 150 kWh are, a reference to compare with. For example, visualizing 1kWh as the energy than ten 100W light bulbs consume in one hour makes it understandable to your grandma. Or showing one week's consumption each hour on one matrix using colored circles.<br /><br />More important is to give a feeling of the order of magnitude. Like showing a community average VS your consumption on a colored scale to have an idea how well you're doing, lets you have a good reference point.<br /><br />I agree that with households community averages are quite complicated since households have extremely different consumption patterns: some work from home, some have many guests, others spend very little time at home, etc... But when it comes to businesses, benchmarking is much less complicated, you can compare bakeries or cafes electricity consumption patterns in a much meaningful way.<br /><br />I think this should be a main target to be implemented in emonCMS, and I believe that the community has something to say and contribute to this topic, so I started this forum thread : http://openenergymonitor.org/emon/node/715&nbsp;please feel free to add your thoughts to it.<br /><br /><br /><div style="text-align: right;"><a href="http://www.fastcodesign.com/1669931/how-a-redesigned-electricity-bill-could-make-you-smarter-and-save-cash" target="_blank">Link to FastCoDesign article.</a></div></div>
]]></content>
  </entry>
  
</feed>
